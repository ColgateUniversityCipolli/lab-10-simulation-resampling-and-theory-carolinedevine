xlab(bquote(proportion))+
ylab("Density")
ggplot(og.sample) +
geom_histogram(aes(x=proportion, y=after_stat(density)),
color="grey")+
geom_density(aes(x = proportion), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(proportion))+
ylab("Density")
ggplot(data = og.sample) +
geom_histogram(aes(x=proportion, y=after_stat(density)),
color="grey")+
geom_density(aes(x = proportion), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(proportion))+
ylab("Density")
proportion.satisfied <- satisfied/sample.size
view(proportion.satisfied)
view(satisfied)
# True Probability
true.p <- 0.39
# First Sample Size
sample.size <- 1004
polls <- 10000
satisfied <- rbinom(polls, size = sample.size, prob = true.p)
proportion.satisfied <- satisfied/sample.size
ggplot(data = og.sample) +
geom_histogram(aes(x=proportion, y=after_stat(density)),
bins = 30
color="grey")+
ggplot(data = og.sample) +
geom_histogram(aes(x=proportion, y=after_stat(density)),
color="grey")+
geom_density(aes(x = proportion), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(proportion))+
ylab("Density")
ggplot(data = og.sample) +
geom_histogram(aes(x=proportion, y=after_stat(density)),
binwidth = 50,
color="grey")+
geom_density(aes(x = proportion), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(proportion))+
ylab("Density")
ggplot(data = og.sample) +
geom_histogram(aes(x=proportion, y=after_stat(density)),
binwidth = 0.5,
color="grey")+
geom_density(aes(x = proportion), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(proportion))+
ylab("Density")
ggplot(data = og.sample) +
geom_histogram(aes(x=proportion, y=after_stat(density)),
binwidth = 20,
color="grey")+
geom_density(aes(x = proportion), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(proportion))+
ylab("Density")
ggplot(data = og.sample) +
geom_histogram(aes(x=proportion, y=after_stat(density)),
binwidth = 40,
color="grey")+
geom_density(aes(x = proportion), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(proportion))+
ylab("Density")
ggplot(data = og.sample) +
geom_histogram(aes(x=proportion, y=after_stat(density)),
binwidth = 0.005,
color="grey")+
geom_density(aes(x = proportion), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(proportion))+
ylab("Density")
ggplot(data = og.sample) +
geom_histogram(aes(x=proportion, y=after_stat(density)),
binwidth = 0.005,
color="grey")+
geom_density(aes(x = proportion), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(proportion))+
ylab("Density")+
ggtitle("Sampling Distribution (n = 1,004)")
ggplot(data = og.sample) +
geom_histogram(aes(x=proportion, y=after_stat(density)),
binwidth = 0.005,
color="grey")+
geom_density(aes(x = proportion), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab("Sample Proportions")+
ylab("Density")+
ggtitle("Sampling Distribution (n = 1,004)")
ggplot(data = og.sample) +
geom_histogram(aes(x=proportion, y=after_stat(density)),
binwidth = 0.005,
color="grey")+
geom_density(aes(x = proportion), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab("Sample Proportions")+
ylab("Density")+
ggtitle("Sampling Distribution (n = 1,004)")
ggplot(data = og.sample) +
geom_histogram(aes(x=proportion, y=after_stat(density)),
binwidth = 0.005,
color="grey")+
geom_density(aes(x = proportion), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab("Sample Proportions")+
ylab("Density")+
ggtitle("Sampling Distribution (n = 1,004)")
# True Probability
true.p <- 0.39
# First Sample Size
sample.size <- 1004
polls <- 10000
satisfied <- rbinom(polls, size = sample.size, prob = true.p)
proportion.satisfied <- satisfied/sample.size
og.sample <- tibble(proportion = proportion.satisfied)
ggplot(data = og.sample) +
geom_histogram(aes(x=proportion, y=after_stat(density)),
binwidth = 0.005,
color="grey")+
geom_density(aes(x = proportion), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab("Sample Proportions")+
ylab("Density")+
ggtitle("Sampling Distribution (n = 1,004)")
# Range of the middle 95%
quantile(proportion.satisfied, probs = c(0.025, 0.975))
# Range of the middle 95%
quant.nums <- quantile(proportion.satisfied, probs = c(0.025, 0.975))
quant.nums[2]-quant.nums[1]
quant.nums[2]
quant.nums[1]
range.middle <- quant.nums[2] - quant.nums[1]
range.middle
margin.error <- range.middle/2
margin.error
### Second Sample Size ###
sample.size2 <- 2008 # doubled sample size
satisfied2 <- rbinom(polls, size = sample.size2, prob = true.p)
proportion.satisfied2 <- satisfied2/sample.size2
sample2 <- tibble(proportion = proportion.satisfied2)
ggplot(data = sample2) +
geom_histogram(aes(x=proportion, y=after_stat(density)),
binwidth = 0.005,
color="grey")+
geom_density(aes(x = proportion), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab("Sample Proportions")+
ylab("Density")+
ggtitle("Sampling Distribution (n = 2,008)")
# Range of the middle 95%
quant.nums.2 <- quantile(proportion.satisfied2, probs = c(0.025, 0.975))
quant.nums.2
range.middle.2 <- quant.nums.2[2] - quant.nums.2[1]
range.middle.2
margin.error.2 <- range.middle.2/2
margin.error.2
# True Probability
true.p <- 0.39
### First Sample Size ###
sample.size <- 1004
polls <- 10000
satisfied <- rbinom(polls, size = sample.size, prob = true.p)
proportion.satisfied <- satisfied/sample.size
og.sample <- tibble(proportion = proportion.satisfied)
sample.plot.1 <- ggplot(data = og.sample) +
geom_histogram(aes(x=proportion, y=after_stat(density)),
binwidth = 0.005,
color="grey")+
geom_density(aes(x = proportion), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab("Sample Proportions")+
ylab("Density")+
ggtitle("Sampling Distribution (n = 1,004)")
# Range of the middle 95%
quant.nums <- quantile(proportion.satisfied, probs = c(0.025, 0.975))
range.middle <- quant.nums[2] - quant.nums[1]
margin.error <- range.middle/2
margin.error
# True Probability
true.p <- 0.39
### First Sample Size ###
sample.size <- 1004
polls <- 10000
satisfied <- rbinom(polls, size = sample.size, prob = true.p)
proportion.satisfied <- satisfied/sample.size
og.sample <- tibble(proportion = proportion.satisfied)
sample.plot.1 <- ggplot(data = og.sample) +
geom_histogram(aes(x=proportion, y=after_stat(density)),
binwidth = 0.005,
color="grey")+
geom_density(aes(x = proportion), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab("Sample Proportions")+
ylab("Density")+
ggtitle("Sampling Distribution (n = 1,004)")
#Shape is roughly normal (bell-shaped), centering around 0.39, symmetrical (small variation from random samping)
# Expected b/c of CLT
# Range of the middle 95%
quant.nums <- quantile(proportion.satisfied, probs = c(0.025, 0.975))
range.middle <- quant.nums[2] - quant.nums[1]
margin.error <- range.middle/2
# This margin of error is approximately 3% which is lower than the 4% Gallup reported
### Second Sample Size ###
sample.size2 <- 2008 # doubled sample size
satisfied2 <- rbinom(polls, size = sample.size2, prob = true.p)
proportion.satisfied2 <- satisfied2/sample.size2
sample2 <- tibble(proportion = proportion.satisfied2)
sample.plot.2 <- ggplot(data = sample2) +
geom_histogram(aes(x=proportion, y=after_stat(density)),
binwidth = 0.005,
color="grey")+
geom_density(aes(x = proportion), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab("Sample Proportions")+
ylab("Density")+
ggtitle("Sampling Distribution (n = 2,008)")
#Shape is roughly normal (bell-shaped), centering around 0.39, symmetrical (small variation from random samping)
# Expected b/c of CLT
# Range of the middle 95%
quant.nums.2 <- quantile(proportion.satisfied2, probs = c(0.025, 0.975))
range.middle.2 <- quant.nums.2[2] - quant.nums.2[1]
margin.error.2 <- range.middle.2/2
# This margin of error is approximately 2.15% which is lower than the 4% Gallup reported
# Two Samples Together
sample.distributions <- sample.plot.1 + sample.plot.2
sample.distributions
# Table
table1 <- tibble(
`Sample Size` = c(1004, 2008),
`Range of middle 95%` = c(range.middle, range.middle.2),
`Margin of Error` = c(margin.error, margin.error.2)
)
table1
# Data from the Gallup Survey
samp.size <= 1004
# Data from the Gallup Survey
samp.size <- 1004
perc.satisfied <- 0.39
perc.unsatisfied <- 0.59
perc.no.opinion <- 0.02
dat.gallup <- c(rep(1, round(perc.satisfied*samp.size)),
rep(0, round(perc.unsatisfied*samp.size)))
original.sample <- tibble(response = dat.gallup)
original.sample
original.sample <- tibble(id = 1:samp.size,
response = dat.gallup)
original.sample <- tibble(id = 1:samp.size - (round(samp.size*perc.no.opinion)),
response = dat.gallup)
original.sample <- tibble(id = 1:samp.size - (samp.size*perc.no.opinion),
response = dat.gallup)
dat.gallup <- c(rep(1, perc.satisfied*samp.size),
rep(0, perc.unsatisfied*samp.size),
rep(NA, perc.no.opinion*samp.size))
original.sample
original.sample <- tibble(id = 1:samp.size,
response = dat.gallup)
dat.gallup <- c(rep(`satisfied`, perc.satisfied*samp.size),
rep(`unsatisfied`, perc.unsatisfied*samp.size),
rep(`no opinion`, perc.no.opinion*samp.size))
dat.gallup <- c(rep(`satisfied`, perc.satisfied*samp.size),
rep(`unsatisfied`, perc.unsatisfied*samp.size),
rep(`no opinion`, perc.no.opinion*samp.size))
dat.gallup <- tibble(id = 1:samp.size,
response =  c(rep("satisfied", perc.satisfied*samp.size),
rep("unsatisfied", perc.unsatisfied*samp.size),
rep("no opinion", perc.no.opinion*samp.size)))
rep("satisfied", perc.satisfied*samp.size)
(rep("satisfied", perc.satisfied*samp.size))
view(rep("satisfied", perc.satisfied*samp.size))
view(rep("unsatisfied", perc.unsatisfied*samp.size))
view(rep("no opinion", perc.no.opinion*samp.size)))
view(rep("no opinion", perc.no.opinion*samp.size))
dat.gallup <- tibble(id = 1:samp.size,
dat.gallup
rep("no opinion", samp.size - round(perc.satisfied*samp.size) -  round(perc.unsatisfied*samp.size)))
dat.gallup <- tibble(id = 1:samp.size,
dat.gallup
dat.gallup <- tibble(id = 1:samp.size,
dat.gallup <- tibble(id = 1:samp.size,
response =  c(rep("satisfied", round(perc.satisfied*samp.size)),
rep("unsatisfied", round(perc.unsatisfied*samp.size)),
rep("no opinion", round(perc.no.opinion*samp.size))
))
dat.gallup
View(dat.gallup)
dat.gallup <- tibble(id = 1:samp.size,
response =  c(rep("satisfied", round(perc.satisfied*samp.size)),
rep("unsatisfied", round(perc.unsatisfied*samp.size)),
rep("no opinion", round(perc.no.opinion*samp.size)))
)
dat.gallup <- tibble(id = 1:samp.size,
response =  c(rep("satisfied", round(perc.satisfied*samp.size)),
rep("unsatisfied", round(perc.unsatisfied*samp.size)),
rep("no opinion", round(perc.no.opinion*samp.size)))
)
dat.gallup |>
summarize(
proportion.sat = mean(response == "satisfied")
)
################################################################################
# What is a resample?
################################################################################
samp.size <- 100
og.sample <- tibble(id          = 1:samp.size,
measurement = rnorm(samp.size))
og.sample |>
summarize(mean = mean(measurement),
sd = sd(measurement))
# Collect a random resample
resample <- sample(x = 1:samp.size,
size = samp.size,
replace = T)
resample
samp.size <- 1004
perc.satisfied <- 0.39
perc.unsatisfied <- 0.59
perc.no.opinion <- 0.02 # is this relevant for the data
dat.gallup <- tibble(id = 1:samp.size,
response =  c(rep("satisfied", round(perc.satisfied*samp.size)),
rep("unsatisfied", round(perc.unsatisfied*samp.size)),
rep("no opinion", round(perc.no.opinion*samp.size)))
)
R <- 1000 # number of resamples
dat.gallup |>
summarize(
proportion.sat = mean(response == "satisfied")
)
dat.gallup <- tibble(id = 1:samp.size,
response =  c(rep("satisfied", round(perc.satisfied*samp.size)),
rep("unsatisfied", round(perc.unsatisfied*samp.size)),
rep("no opinion", round(perc.no.opinion*samp.size)))
)
resamples <- tibble(p.hat = numeric(R))
R <- 1000 # number of resamples
resamples <- tibble(p.hat = numeric(R))
for i in 1:R){
R <- 1000 # number of resamples
resamples <- tibble(p.hat = numeric(R))
for (i in 1:R){
curr.resample <- sample(x = dat.gallup$response,
size = nrow(dat.gallup),
replace = TRUE))
R <- 1000 # number of resamples
resamples <- tibble(p.hat = numeric(R))
for (i in 1:R){
curr.resample <- sample(x = dat.gallup$response,
size = nrow(dat.gallup),
replace = TRUE)
resamples$p.hat[i] <- mean(curr.resample == "satisfied")
}
ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
breaks=seq(-0.5,12.5,1)/12,
color="grey")+
geom_density(aes(x = p.hat), color = "red")++
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(hat(p)))+
ylab("Density")+
scale_x_continuous(breaks=round(seq(0,12,1)/12,2))
ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
breaks=seq(-0.5,12.5,1)/12,
color="grey")+
geom_density(aes(x = p.hat), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(hat(p)))+
ylab("Density")+
scale_x_continuous(breaks=round(seq(0,12,1)/12,2))
ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
bins = 30,
color="grey")+
geom_density(aes(x = p.hat), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(hat(p)))+
ylab("Density")+
scale_x_continuous(breaks=round(seq(0,12,1)/12,2))
ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
bins = 30,
color="grey")+
geom_density(aes(x = p.hat), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(hat(p)))+
ylab("Density")+
ggtitle("Resampling Histogram of Proportions")
ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
bins = 30,
color="grey")+
geom_density(aes(x = p.hat), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(hat(p)))+
ylab("Density")+
ggtitle("Resampling Histogram of Proportions")
resample.plot <- ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
bins = 30,
color="grey")+
geom_density(aes(x = p.hat), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(hat(p)))+
ylab("Density")+
ggtitle("Resampling Histogram of Proportions")
resample.plot
resample.plot <- ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
bins = 30,
color="grey")+
geom_density(aes(x = p.hat), color = "red")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(hat(p)))+
ylab("Density")+
ggtitle("Resampling Distribution of "~hat(p))
resample.plot
# Shape is re
re.quant <- quantile(resamples$p.hat, probs = c(0.025, 0.975))
re.range.middle <- re.quant[2] - re.quant[1]
re.margin.error <- re.range.middle / 2
table2 <- tibble(
`Sample Size` = 1004
`Range of middle 95%` = re.range.middle,
table2 <- tibble(
`Sample Size` = 1004,
`Range of middle 95%` = re.range.middle,
`Margin of Error` = re.margin.error
)
View(table2)
################################################################################
# Part 3: Simulation over n and p
################################################################################
n <- seq(100, 3000, by = 10)
p <- seq(0.01, 0.99, by = 0.01)
polls <- 10000
################################################################################
# Part 3: Simulation over n and p
################################################################################
nvalues <- seq(100, 3000, by = 10)
pvalues <- seq(0.01, 0.99, by = 0.01)
polls <- 10000
################################################################################
# Part 3: Simulation over n and p
################################################################################
nvalues <- seq(100, 3000, by = 10)
pvalues <- seq(0.01, 0.99, by = 0.01)
polls <- 10000
new.results <- tibble(n = numeric(),
p = numeric(),
moe = numeric())
for (n in nvalues){
for (p in pvalues){
sample.proportions <- rbinom(polls, size = n, prob = p)/n
quant <- quantile(sample.proportions, probs = c(0.025, 0.975))
moe <- (quant[2]-quant[1])/2
new.results <- bind_rows(new.results,
tibble(n = n, p = p, moe = moe))
}
}
for (n in nvalues){
for (p in pvalues){
sample.proportions <- rbinom(polls, size = n, prob = p)/n
quant <- quantile(sample.proportions, probs = c(0.025, 0.975))
moe <- (quant[2]-quant[1])/2
new.results <- bind_rows(new.results,
tibble(n = n, p = p, moe = moe))
}
}
view(new.results)
ggplot()+
geom_raster(data = new.results, aes(x = n, y = p, fill = moe))+
scale_fill_viridis_c(name = "Margin of Error")+
theme_bw()+
labs(
title = "Estimated Margin of Error as a Function of n and p",
x = "Sample Size (n)",
y = "True Proportion (p)"
)
################################################################################
# Part 3: Simulation over n and p
################################################################################
nvalues <- seq(100, 3000, by = 10)
pvalues <- seq(0.01, 0.99, by = 0.01)
